{"name":"Game Dev Adventure","tagline":"Unity Cocos2dx Tutorial article","body":"####About this Blog\r\n\r\nHi,My name is Eason Jiang,And this's the first time I write tech article in English.  I used be a game designer , and for now I'm a cocos2dx game developer \r\n\r\n\r\nRencently, I'm interseting in Unity 3D,because I believe it's a more proficent technology than Cocos2dx is.\r\n\r\n\r\nI believe the best way to learn a tech is try to teach it to someone else. and this the reason I build this Blog.\r\nSo,talk is cheap,let's code sth.\r\n\r\n##Button and Spin\r\n\r\nOk, In this tutorial our target is to create an cube and a button. \r\nWhen we click the button, the cube spinning\r\n===================\r\nThe first step is create a new project.\r\n\r\nblablabla \r\nAfter that ,we create a plane as background\r\n\r\nStep 3, We create a cube in object\r\n\r\nAnd we select the cube and add a C# script on it, name it as  \"Spin.cs\"\r\n\r\nDouble click it, and enter the follow code\r\n\r\n\tvoid OnGUI(){\r\n\t\tif (GUI.Button (new Rect (100, 170, 200, 100), \"Spin The Cube\")) {\r\n\t\t\ttransform.Rotate(Vector3.up * Time.deltaTime * (-100));\r\n\t\t}\r\n\r\n\t}\r\n\r\nThis's a little bit werid from my pov.In cocos2dx, or some other game dev engine,If we want to create some UI, there's step to do it.\r\nStep 1: init the button\r\nStep 2: update the call back of the button,some time this step is already done in step one.\r\n\r\nSo let's do some experiment,let's modify the code in OnGUI() like the follow:\r\n\r\n\t\r\n\t//original x\r\n\tprivate float movx = 1;\r\n\tvoid OnGUI(){\r\n\r\n\t\tmovx = movx +  0.01f;\r\n\t\tif (GUI.Button (new Rect (movx, 170, 200, 100), \"Spin The Cube\")) {\r\n\t\t\ttransform.Rotate(Vector3.up * Time.deltaTime * (-100));\r\n\t\t}\r\n\r\n\t\tDebug.Log (\"On GUI\");\r\n\t}\r\n\r\nAfter we run it, the console displays the results, So many\r\n\r\n\"On GUI\"\r\n\"On GUI\"\r\n\"On GUI\"\r\n\"On GUI\"\r\n\"On GUI\"\r\n....\r\n\r\nMeanwhile, the button continuously move to the right, so we may safely arrive at the following conclusion \r\n\r\n1.The function OnGUI() is a game update function,it'll be updated at regular intervals\r\n2.There's no init function (for now),so unity just draw a new button every interval.\r\n\r\nSo we deduce that every update function work like OnGUI(), if you want to use these like old way,you have to define them out of these functions.\r\n\r\n\r\n=======\r\nBest practioe Unity Sublime plugin\r\n\r\nUnity Completion Light\r\n\r\n=====\r\n\r\nLet's create a plane as game background, and modify it's coordinates to origin position,that means modify it's transform postion to (0,0,0),and move our camera to make sure the plane in our view;\r\n\tTips:\r\n\t\tAlt +  mouse left, scene view rotate with the ground\r\n\t\tAlt +  Ctrl(Com) + left, scene view move translation\r\n\t\tMouse wheel:Move the view forth and back\r\n\tTips End\r\n\r\nNext feature, let's try to make the cube jump.\r\nFirst,modify the cube's postion,drag the handle on it to move to the corresponding direction\r\nAnd we still need a sphere, create it in game object.\r\n\r\n####Add rigidbody\r\n\r\nNow add a Rigidbody to both of them, to make sure that they have mass and affected by gravity\r\nand then lift the cube to the air,after that when we press the Play button,the cube will fall firstly.\r\n\r\n####Make the cube jump\r\n\r\nNow it's has a rigidbody, add the follow code to the Update()\r\n\r\n\tvoid Update () {\r\n\t\tif(Input.GetMouseButtonDown(0)){\r\n\t\t\tthis.GetComponent<Rigidbody>().velocity = Vector3.up * this.jump_speed;\r\n\t\t}\r\n\t}\r\nAfter this, each time when we press the mouse left button,it'll get a velocity upward,and the cube jump once\r\n\r\n####Add material\r\n\r\nIn project view, press mouse right and create a Material ,and change it's name to Player Material,and modify it's \r\ncolor to what ever you want, and drag it to any gameObject that have some Render\r\n\r\n####Add light \r\nLight is a kind of GameObject,create one and drag it to any postion you want, you won't miss it.\r\n\r\n###Send the ball fly\r\n\r\nFirst, add a rigidboy to the ball.\r\nSecond,add a script to it and add the follow in the Start() function\r\n\r\n\t// Use this for initialization\r\n\tvoid Start () {\r\n\t\tthis.GetComponent<Rigidbody>().velocity = new Vector3(-0.8f, 8.0f , 0.0f);\r\n\t\r\n\t}\r\n\r\nNow the ball will fly like a parabola\r\n\r\n###Organize project folder\r\nCreate folder in project view and drag everything according classfication :Prefab,Scene,Script,Material\r\n\r\n###Create a Launcher Script\r\n\r\nLet's try to fire some ball.\r\n\r\nCreate a empty GameObject and create a Script on the gameobject, name it Laucher.cs and add the follow code in it\r\n\r\n\tpublic class Launcher : MonoBehaviour {\r\n\r\n\t\tpublic GameObject ballPrefab;\r\n\r\n\t\t// Use this for initialization\r\n\t\tvoid Start () {\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t// Update is called once per frame\r\n\t\tvoid Update () {\r\n\t\t\tif(Input.GetMouseButtonDown(1)){\r\n\t\t\t\tInstantiate(this.ballPrefab);\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t}\r\n\r\n\r\nNow drag ball prefab in to inspector Ball Prefab slot and run the game\r\nEach time we press the right button, a ball prefab be Instantiated\r\n\r\n####Delete the ball out of view\r\n\r\nIf we keep clicking the right mouse, there'll be full of balls in this scene,and\r\neven they leave the scene, they still exist. \r\nSo let's try remove them when they're not visible.\r\n\r\n\tvoid OnBecameInvisible(){\r\n\t\tDestroy(this.gameObject);\r\n\t}\r\n\r\nAnd when they out of the view ,they'll be destoryed\r\n\r\n## Forbide the cube jump twice in the air\r\n\r\nFor now, when we press the mouse left, the cube jumped. That is not what happened in real life,\r\n\r\nLet's add the follow code\r\n\r\npublic class Player : MonoBehaviour {\r\n\r\n\tprotected float jump_speed = 5.0f;\r\n\tprivate bool is_landing = false;\r\n\t// Use this for initialization\r\n\tvoid Start () {\r\n\t\tis_landing = false;\t\r\n\t}\r\n\t\r\n\t// Update is called once per frame\r\n\tvoid Update () {\r\n\t\tif (is_landing) \r\n\t\t{\r\n\t\t\tif(Input.GetMouseButtonDown(0)){\r\n\t\t\t\tthis.GetComponent<Rigidbody>().velocity = Vector3.up * this.jump_speed;\r\n\t\t\t\tis_landing = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvoid OnCollisionEnter(Collision collision)\r\n\t{\r\n\t\tis_landing = true;\r\n\t\t\r\n\t}\r\n}\r\n\r\nWhat we do in the previous code?\r\nWe define a bool vale is_landing to record the cube's landing state,\r\neach time the cube jumped, the is_landing set false,and when the cube collide anything, the\r\nis_landing state will be set true,and only when the is_landing state\r\nis true, the jump function will be executed.\r\n\r\nBut there's bug in it,\r\n\r\nLet's fix it.\r\n\r\nFirstly , add a Debug.Break() in Update()\r\nThis function will pause the game when be called,and after that, we can play game each frame\r\nAnd we find the collision problem, when cube collide anything,the is_landing state will be set true,and the cube\r\nbe able to jump again.\r\nAnd the fix plan is Add \"Tag\" to the prehab, make sure only when the plane collide, the state will be reset\r\n\r\nSet the Floor tag as \"Floor\", and add the follow code \r\n\tvoid OnCollisionEnter(Collision collision)\r\n\t{\r\n\t\tif (collision.gameObject.tag == \"Floor\") \r\n\t\t{\r\n\t\t\tis_landing = true;\t\r\n\t\t}\r\n\t}\r\n\r\nSo only when the cube collide the floor, it's landing state will be reset to ture\r\n\r\n\r\n####Which Script run first?\r\n\r\nAs we already know,the gameobject can add many script on it, but which one run firstly? or just random?\r\nLet's do a little experiment\r\nCreate an empty gameObject and add one script on it,\r\n\r\npublic class Test1 : MonoBehaviour {\r\n\r\n\tprivate bool isUpdated = false;\r\n\t// Use this for initialization\r\n\tvoid Start () {\r\n\t\tDebug.Log(\"test 1 start\");\r\n\t}\r\n\t\r\n\t// Update is called once per frame\r\n\tvoid Update () {\r\n\t\tif (!isUpdated) \r\n\t\t{\r\n\t\t\tDebug.Log(\"test 1 up\");\r\n\t\t\tisUpdated = true;\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}\r\n\r\nAs we see, This script just output some log, when Start(),and first time Update(),now let's add another one on it\r\n\r\npublic class Test2 : MonoBehaviour {\r\n\r\n\tprivate bool isUpdated = false;\r\n\t// Use this for initialization\r\n\tvoid Start () {\r\n\t\tDebug.Log(\"test 2 start\");\r\n\t\r\n\t}\r\n\t\r\n\t// Update is called once per frame\r\n\tvoid Update () {\r\n\t\tif (!isUpdated) \r\n\t\t{\r\n\t\t\tDebug.Log(\"test 2 up\");\r\n\t\t\tisUpdated = true;\r\n\t\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n}\r\n\r\nBasically same funcionality,but output content is \"test 2..\"\r\nRun the game,and the Console output\r\n\r\ntest 2 start\r\ntest 1 start\r\ntest 2 up\r\ntest 1 up\r\n\r\nThe conclusion is quite clear, Unity will run the script according to the reverse chronological time order.\r\n\r\n\r\n###Freeze Rotation\r\n\r\nThe cube's rigidbody has a option name \"Constrains\",unfold it and check the boxes that you want to freeze\r\n\r\n###Set the bounciness\r\n\r\nSet the Ball prefab's mass to 0.01 in it's rigidbody, and apply it, now every ball's mass is seted to the same mass\r\nBut that doesn't look very good, so let's try the Physic Material\r\n\r\nIn project view, press right mouse and Create->Physic Material and name it Ball Physic Material\r\nSelect that and change it's Bounciness to 1, and drag this Physic Material to Ball's Sphere Collider->Material,\r\nand apply it.\r\nNow, when they collide, the ball bounced quickly\r\n\r\n###Set the gravity\r\n\r\nEdit->Project Setting->Physics ,change the Gravity y to -20, then cube and balls falls more quickly.\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}